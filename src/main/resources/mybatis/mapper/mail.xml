<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace는 @Mapper를 지정한다. -->
<mapper namespace="com.gdu.workship.mapper.MailMapper">

	<resultMap type="MemberDTO" id="MemberMap">
	    <id column="MEMBER_NO" property="memberNo"/>
	    <result column="MEMBER_NAME" property="memberName"/>
	    <result column="EMAIL_ID" property="emailId"/>
	    <association javaType="JobDTO" property="jobDTO">
	        <id column="JOB_NO" property="jobNo"/>
	        <result column="JOB_NAME" property="jobName"/>
	    </association>
	    <association javaType="DepartmentDTO" property="departmentDTO">
	        <id column="DEPT_NO" property="deptNo"/>
	        <result column="DEPT_NAME" property="deptName"/>
	    </association>
	</resultMap>
	
	<resultMap type="MailDTO" id="MailMap">
		<id column="MAIL_NO" property="mailNo"/>
		<result column="MAIL_TITLE" property="mailTitle"/>
		<result column="MAIL_CONTENT" property="mailContent"/>
		<result column="MAIL_HAS_FILE" property="mailHasFile"/>
		<result column="MAIL_DATE" property="mailDate"/>
		<result column="MAIL_CATEGORY" property="mailCategory"/>
		<association javaType="MemberDTO" property="memberDTO">
			<id column="EMAIL_ID" property="emailId"/>
			<result column="MEMBER_NAME" property="memberName"/>
		</association>
		<association javaType="MailToDTO" property="mailToDTO">
			<id column="MAIL_TO_NO" property="mailToNo"/>
			<result column="MAIL_TO" property="mailTo"/>
			<result column="MAIL_TO_ROLE" property="mailToRole"/>
			<result column="MAIL_TO_CATEGORY" property="mailToCategory"/>
			<result column="MAIL_TO_STATUS" property="mailToStatus"/>
			<result column="MAIL_TO_STAR" property="mailToStar"/>
		</association>
	</resultMap>
	
	<resultMap type="MailToDTO" id="MailToMap">
		<id column="MAIL_TO_NO" property="mailToNo"/>
		<result column="MAIL_TO" property="mailTo"/>
		<result column="MAIL_TO_ROLE" property="mailToRole"/>
		<result column="MAIL_TO_CATEGORY" property="mailToCategory"/>
		<result column="MAIL_TO_STATUS" property="mailToStatus"/>
		<result column="MAIL_TO_STAR" property="mailToStar"/>
		<association javaType="MailDTO" property="mailDTO" >
			<id column="MAIL_NO" property="mailNo"/>
			<result column="MAIL_TITLE" property="mailTitle"/>
			<result column="MAIL_CONTENT" property="mailContent"/>
			<result column="MAIL_HAS_FILE" property="mailHasFile"/>
			<result column="MAIL_DATE" property="mailDate"/>
			<result column="MAIL_CATEGORY" property="mailCategory"/>		
		</association>		
	</resultMap>	
	
	<resultMap type="MailFileDTO" id="MailFileMap">
		<id column="MAIL_FILE_NO" property="mailFileNo"/>
		<result column="MAIL_FILE_PATH" property="mailFilePath"/>
		<result column="MAIL_FILE_ORIGIN_NAME" property="mailFileOriginName"/>
		<result column="MAIL_FILE_SYSTEM_NAME" property="mailFileSystemName"/>
		<association javaType="MailDTO" property="MailDTO">
			<id column="MAIL_NO" property="mailNo"/>
		</association>
	</resultMap>

	<!-- 각 메일 개수 체크 -->
	<select id="getMailTotalCount" parameterType="Map" resultType="int">
		SELECT COUNT(DISTINCT M.MAIL_NO)
		  FROM MAIL_T M LEFT JOIN MAIL_TO_T T
		    ON M.MAIL_NO = T.MAIL_NO
		 WHERE (M.EMAIL_ID = #{emailId} AND M.MAIL_CATEGORY = #{Category})
		    OR (T.MAIL_TO = #{emailId} AND T.MAIL_TO_CATEGORY = #{Category})
	</select>
	
	<select id="getMailCount" parameterType="Map" resultType="int">
		SELECT COUNT(DISTINCT M.MAIL_NO)
		  FROM MAIL_T M LEFT JOIN MAIL_TO_T T
		    ON M.MAIL_NO = T.MAIL_NO		    		   
		 <choose>
		 	<when test="Category == 'NOREAD'">
		 		<where>
			    	<if test="column != '' and query != ''">
			      		( ${column} LIKE CONCAT('%', UPPER(#{query}), '%') OR ${column} LIKE CONCAT('%', LOWER(#{query}), '%') )
			    	</if>
			    	<if test="emailId != ''">
		 				AND T.MAIL_TO = #{emailId}
		 			</if>
		 			AND T.MAIL_TO_CATEGORY = 'INBOX' AND T.MAIL_TO_STATUS = 'N'
			  	</where>
		 	</when>
		 	
		 	<when test="Category == 'STARRED'">
		 		<where>
			    	<if test="column != '' and query != ''">
			      		( ${column} LIKE CONCAT('%', UPPER(#{query}), '%') OR ${column} LIKE CONCAT('%', LOWER(#{query}), '%') )
			    	</if>
			    	<if test="emailId != ''">
		 				AND T.MAIL_TO = #{emailId}
		 			</if>
		 			AND T.MAIL_TO_CATEGORY = 'INBOX' AND T.MAIL_TO_STAR = 'Y' 
			  	</where>
		 	</when>
		 	
		 	<when test="Category == 'INBOX' or Category == 'SPAM' or Category == 'TRASH'">
		 		<where>
			    	<if test="column != '' and query != ''">
			      		( ${column} LIKE CONCAT('%', UPPER(#{query}), '%') OR ${column} LIKE CONCAT('%', LOWER(#{query}), '%') )
			    	</if>
			    	<if test="emailId != '' and Category != null">
		 				AND T.MAIL_TO = #{emailId} AND T.MAIL_TO_CATEGORY = #{Category}
		 			</if>
			  	</where>
		 	</when>
		 	
		 	<when test="Category == 'SENT' or Category == 'DRAFTS'">
		 		<where>
			    	<if test="column != '' and query != ''">
			      		( ${column} LIKE CONCAT('%', UPPER(#{query}), '%') OR ${column} LIKE CONCAT('%', LOWER(#{query}), '%') )
			    	</if>
			    	<if test="emailId != '' and Category != null">
		 				AND M.EMAIL_ID = #{emailId}	AND M.MAIL_CATEGORY = #{Category}
		 			</if>
			  	</where>
		 	</when>
		 </choose>
	</select>
	
	<select id="getMailNoReadCount" parameterType="Map" resultType="int">
		SELECT COUNT(DISTINCT M.MAIL_NO)
		  FROM MAIL_T M LEFT JOIN MAIL_TO_T T
		    ON M.MAIL_NO = T.MAIL_NO
		 WHERE T.MAIL_TO = #{emailId} AND T.MAIL_TO_CATEGORY = 'INBOX' AND T.MAIL_TO_STATUS = 'N'
	</select>
	
	<select id="getMailStarCount" parameterType="Map" resultType="int">
		SELECT COUNT(DISTINCT M.MAIL_NO)
		  FROM MAIL_T M LEFT JOIN MAIL_TO_T T
		    ON M.MAIL_NO = T.MAIL_NO
		 WHERE T.MAIL_TO = #{emailId} AND T.MAIL_TO_CATEGORY = 'INBOX' AND T.MAIL_TO_STAR = 'Y' 
	</select>
	
	<!-- 메일 목록 -->
	<select id="getMailList" parameterType="Map" resultMap="MailMap">
		 <choose>
		 	<when test="Category == 'NOREAD'">
			 	SELECT A.EMAIL_ID, A.MEMBER_NAME, A.MAIL_NO, A.MAIL_TITLE, A.MAIL_CONTENT, A.MAIL_HAS_FILE, A.MAIL_DATE, A.MAIL_CATEGORY, A.MAIL_TO_NO, A.MAIL_TO, A.MAIL_TO_ROLE, A.MAIL_TO_CATEGORY, A.MAIL_TO_STATUS, A.MAIL_TO_STAR
			  	  FROM (SELECT E.EMAIL_ID, E.MEMBER_NAME, M.MAIL_NO, M.MAIL_TITLE, M.MAIL_CONTENT, M.MAIL_HAS_FILE, M.MAIL_DATE, M.MAIL_CATEGORY, T.MAIL_TO_NO, T.MAIL_TO, T.MAIL_TO_ROLE, T.MAIL_TO_CATEGORY, T.MAIL_TO_STATUS, T.MAIL_TO_STAR
			  		 	  FROM MEMBER_T E INNER JOIN MAIL_T M 
			  		 	    ON E.EMAIL_ID = M.EMAIL_ID INNER JOIN MAIL_TO_T T 
			  		 	    ON M.MAIL_NO = T.MAIL_NO					  		 
				  		<where>
				  			<if test="column != '' and query != ''">
				  				( ${column} LIKE CONCAT('%', UPPER(#{query}), '%') OR ${column} LIKE CONCAT('%', LOWER(#{query}), '%') )
				  			</if>
				  			<if test="emailId != ''">
				 				AND T.MAIL_TO = #{emailId}
				 			</if>
				 			AND T.MAIL_TO_CATEGORY = 'INBOX' AND T.MAIL_TO_STATUS = 'N'
				  		</where>) A
				 ORDER BY A.MAIL_DATE DESC
				 LIMIT #{begin}, #{recordPerPage}
		 	</when>
		 	
		 	<when test="Category == 'STARRED'">
		 		SELECT A.EMAIL_ID, A.MEMBER_NAME, A.MAIL_NO, A.MAIL_TITLE, A.MAIL_CONTENT, A.MAIL_HAS_FILE, A.MAIL_DATE, A.MAIL_CATEGORY, A.MAIL_TO_NO, A.MAIL_TO, A.MAIL_TO_ROLE, A.MAIL_TO_CATEGORY, A.MAIL_TO_STATUS, A.MAIL_TO_STAR
			  	  FROM (SELECT E.EMAIL_ID, E.MEMBER_NAME, M.MAIL_NO, M.MAIL_TITLE, M.MAIL_CONTENT, M.MAIL_HAS_FILE, M.MAIL_DATE, M.MAIL_CATEGORY, T.MAIL_TO_NO, T.MAIL_TO, T.MAIL_TO_ROLE, T.MAIL_TO_CATEGORY, T.MAIL_TO_STATUS, T.MAIL_TO_STAR
			  		 	  FROM MEMBER_T E INNER JOIN MAIL_T M 
			  		 	    ON E.EMAIL_ID = M.EMAIL_ID INNER JOIN MAIL_TO_T T 
			  		 	    ON M.MAIL_NO = T.MAIL_NO
				  		<where>
				  			<if test="column != '' and query != ''">
				  				( ${column} LIKE CONCAT('%', UPPER(#{query}), '%') OR ${column} LIKE CONCAT('%', LOWER(#{query}), '%') )
				  			</if>
				  			<if test="emailId != ''">
				 				AND T.MAIL_TO = #{emailId}
				 			</if>
				 			AND T.MAIL_TO_CATEGORY = 'INBOX' AND T.MAIL_TO_STAR = 'Y' 
				  		</where>) A
				 ORDER BY A.MAIL_DATE DESC
				 LIMIT #{begin}, #{recordPerPage}
		 	</when>
		 	
		 	<when test="Category == 'INBOX' or Category == 'SPAM' or Category == 'TRASH'">
		 		SELECT A.EMAIL_ID, A.MEMBER_NAME, A.MAIL_NO, A.MAIL_TITLE, A.MAIL_CONTENT, A.MAIL_HAS_FILE, A.MAIL_DATE, A.MAIL_CATEGORY, A.MAIL_TO_NO, A.MAIL_TO, A.MAIL_TO_ROLE, A.MAIL_TO_CATEGORY, A.MAIL_TO_STATUS, A.MAIL_TO_STAR
			  	  FROM (SELECT E.EMAIL_ID, E.MEMBER_NAME, M.MAIL_NO, M.MAIL_TITLE, M.MAIL_CONTENT, M.MAIL_HAS_FILE, M.MAIL_DATE, M.MAIL_CATEGORY, T.MAIL_TO_NO, T.MAIL_TO, T.MAIL_TO_ROLE, T.MAIL_TO_CATEGORY, T.MAIL_TO_STATUS, T.MAIL_TO_STAR
			  		 	  FROM MEMBER_T E INNER JOIN MAIL_T M 
			  		 	    ON E.EMAIL_ID = M.EMAIL_ID INNER JOIN MAIL_TO_T T 
			  		 	    ON M.MAIL_NO = T.MAIL_NO
				  		<where>
				  			<if test="column != '' and query != ''">
				  				( ${column} LIKE CONCAT('%', UPPER(#{query}), '%') OR ${column} LIKE CONCAT('%', LOWER(#{query}), '%') )
				  			</if>
				  			<if test="emailId != '' and Category != null">
				  				AND T.MAIL_TO = #{emailId} AND T.MAIL_TO_CATEGORY = #{Category}
				  			</if>
				  		</where>) A
				 ORDER BY A.MAIL_DATE DESC
				 LIMIT #{begin}, #{recordPerPage}
		 	</when>
		 	
		 <when test="Category == 'SENT' or Category == 'DRAFTS'">
		 	SELECT A.EMAIL_ID, A.MEMBER_NAME, A.MAIL_NO, A.MAIL_TITLE, A.MAIL_CONTENT, A.MAIL_HAS_FILE, A.MAIL_DATE, A.MAIL_CATEGORY, A.MAIL_TO_NO, A.MAIL_TO, A.MAIL_TO_ROLE, A.MAIL_TO_CATEGORY, A.MAIL_TO_STATUS, A.MAIL_TO_STAR
		  	  FROM (SELECT E.EMAIL_ID, E.MEMBER_NAME, M.MAIL_NO, M.MAIL_TITLE, M.MAIL_CONTENT, M.MAIL_HAS_FILE, M.MAIL_DATE, M.MAIL_CATEGORY, T.MAIL_TO_NO, T.MAIL_TO, T.MAIL_TO_ROLE, T.MAIL_TO_CATEGORY, T.MAIL_TO_STATUS, T.MAIL_TO_STAR
		  		 	  FROM MEMBER_T E INNER JOIN MAIL_T M 
		  		 	    ON E.EMAIL_ID = M.EMAIL_ID INNER JOIN MAIL_TO_T T 
		  		 	    ON M.MAIL_NO = T.MAIL_NO	
				  		<where>
				  			<if test="column != '' and query != ''">
				  				( ${column} LIKE CONCAT('%', UPPER(#{query}), '%') OR ${column} LIKE CONCAT('%', LOWER(#{query}), '%') )
				  			</if>
				  			<if test="emailId != '' and Category != null">
				  				AND M.EMAIL_ID = #{emailId} AND M.MAIL_CATEGORY = #{Category}
				  			</if>
				  			AND T.MAIL_TO_ROLE LIKE 'TO'
				  			AND T.MAIL_TO_NO IN (SELECT MIN(MAIL_TO_NO) FROM MAIL_TO_T GROUP BY MAIL_NO)
				  		</where>) A
				 ORDER BY A.MAIL_DATE DESC
				 LIMIT #{begin}, #{recordPerPage}
		 	</when>
		 </choose>
	</select>
	
	<select id="getNameByEmail" parameterType="Map" resultType="MemberDTO">
		SELECT MEMBER_NAME, EMAIL_ID
		  FROM MEMBER_T
		 WHERE EMAIL_ID = #{mailTo} 	
	</select>

	<!-- 메일 상세보기 -->
	<select id="getMailByMailNo" parameterType="Map" resultMap="MailMap">
		SELECT E.EMAIL_ID, E.MEMBER_NAME, M.MAIL_NO, M.MAIL_TITLE, M.MAIL_CONTENT, M.MAIL_HAS_FILE, M.MAIL_DATE, M.MAIL_CATEGORY
	  	  FROM MEMBER_T E INNER JOIN MAIL_T M 
	  		ON E.EMAIL_ID = M.EMAIL_ID
	  	 WHERE M.MAIL_NO = #{mailNo}
	</select>
	
	<select id="getMailByMailToNo" parameterType="Map" resultMap="MailToMap">
		SELECT M.MAIL_NO, T.MAIL_TO_NO, T.MAIL_TO, T.MAIL_TO_ROLE, T.MAIL_TO_CATEGORY, T.MAIL_TO_STATUS, T.MAIL_TO_STAR
		  FROM MAIL_T M INNER JOIN MAIL_TO_T T 
		  	ON M.MAIL_NO = T.MAIL_NO	
		 WHERE T.MAIL_NO = #{mailNo}
	</select>
	
	<select id="getMailToMeByMailToNo" parameterType="Map" resultMap="MailToMap">
		SELECT M.MAIL_NO, T.MAIL_TO_NO, T.MAIL_TO, T.MAIL_TO_ROLE, T.MAIL_TO_CATEGORY, T.MAIL_TO_STATUS, T.MAIL_TO_STAR
		  FROM MAIL_T M INNER JOIN MAIL_TO_T T 
		  	ON M.MAIL_NO = T.MAIL_NO	
		 WHERE T.MAIL_NO = #{mailNo}
		   AND T.MAIL_TO = #{emailId}
	</select>
	
	<select id="getMailToByMailNo" parameterType="Map" resultMap="MailToMap">
		SELECT M.MAIL_NO, T.MAIL_TO_NO, T.MAIL_TO, T.MAIL_TO_ROLE, T.MAIL_TO_CATEGORY, T.MAIL_TO_STATUS, T.MAIL_TO_STAR
		  FROM MAIL_T M INNER JOIN MAIL_TO_T T 
		  	ON M.MAIL_NO = T.MAIL_NO
		 WHERE M.MAIL_NO IN
		 		<foreach collection="checkMailNo" item="mailNo" open="(" separator="," close=")">
		 			#{mailNo}
		 		</foreach>
		  AND MAIL_TO = #{mailTo}
	</select>
<!-- 	
	<select id="getMailFileByNo" parameterType="Map" resultType="MailFileDTO">
		SELECT MAIL_NO, MAIL_FILE_NO, MAIL_FILE_PATH, MAIL_FILE_ORIGIN_NAME, MAIL_FILE_SYSTEM_NAME
		  FROM MAIL_FILE_T
		 WHERE MAIL_NO = #{mailNo}
	</select>
	 -->
	<!-- 메일 상태변경 -->
	<update id="updateStar" parameterType="Map">
		UPDATE MAIL_TO_T
		   SET MAIL_TO_STAR = 'Y'
		 WHERE MAIL_TO_NO = #{mailToNo}
		   AND MAIL_TO = #{mailTo}
	</update>
	
	<update id="updateStatus" parameterType="Map">
		UPDATE MAIL_TO_T
		   SET MAIL_TO_STATUS = 'Y'
		 WHERE MAIL_TO_NO = #{mailToNo}
		   AND MAIL_TO = #{mailTo}		   
	</update>
	
	<update id="updateToTrash" parameterType="Map">
		UPDATE MAIL_TO_T
		   SET MAIL_TO_CATEGORY = 'TRASH'
		 WHERE MAIL_TO_NO = #{mailToNo}
		   AND MAIL_TO = #{mailTo}
	</update>
	
	<update id="updateToSpam" parameterType="Map">
		UPDATE MAIL_TO_T
		   SET MAIL_TO_CATEGORY = 'SPAM'
		 WHERE MAIL_TO_NO = #{mailToNo}
		   AND MAIL_TO = #{mailTo}
	</update>
	
	<update id="deleteSentMail" parameterType="Map">
		UPDATE MAIL_T
		   SET MAIL_CATEGORY = 'DELETE'
		  WHERE MAIL_NO IN
	 		<foreach collection="checkMailNo" item="mailNo" open="(" separator="," close=")">
	 			#{mailNo}
	 		</foreach>
	 		    AND EMAIL_ID = #{emailId} 
	</update>
	
	<delete id="deleteReceiveMail" parameterType="Map">
		DELETE
		  FROM MAIL_TO_T
		 WHERE MAIL_TO_NO = #{mailToNo}
		   AND MAIL_TO = #{mailTo}	
	</delete>
	
	<update id="updateToInbox" parameterType="Map">
		UPDATE MAIL_TO_T
		   SET MAIL_TO_CATEGORY = 'INBOX'
		 WHERE MAIL_TO_NO = #{mailToNo}
		   AND MAIL_TO = #{mailTo}
	</update>

	<update id="changeStar" parameterType="Map">
		UPDATE MAIL_TO_T
		   SET MAIL_TO_STAR = #{mailToStar}
		 WHERE MAIL_TO_NO = #{mailToNo}
		   AND MAIL_TO = #{emailId}
	</update>
	
	<update id="changeStatus" parameterType="Map">
		UPDATE MAIL_TO_T
		   SET MAIL_TO_STATUS = #{mailToStatus}
		 WHERE MAIL_TO_NO = #{mailToNo}
		   AND MAIL_TO = #{emailId}
	</update>
	
	<update id="mailReadCheck" parameterType="Map">
		UPDATE MAIL_TO_T
		   SET MAIL_TO_STATUS = 'Y'
		 WHERE MAIL_TO_NO = #{mailToNo}
		   AND MAIL_TO = #{emailId}
	</update>
	
	<!-- 메일보내기  -->
 
	<insert id="sendMail" useGeneratedKeys="true" keyProperty="mailNo" parameterType="MailDTO">
		<selectKey keyProperty="mailNo" resultType="int" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>		
		INSERT INTO MAIL_T 
			(EMAIL_ID, MAIL_TITLE, MAIL_CONTENT, MAIL_HAS_FILE, MAIL_DATE, MAIL_CATEGORY)			
		VALUES 
			(#{memberDTO.emailId}, #{mailTitle}, #{mailContent}, #{mailHasFile}, NOW(), 'SENT')	
	</insert>

	<insert id="sendMailTo" useGeneratedKeys="true" keyProperty="mailToNo" parameterType="MailToDTO">
		INSERT INTO MAIL_TO_T
			(MAIL_NO, MAIL_TO, MAIL_TO_ROLE, MAIL_TO_CATEGORY, MAIL_TO_STATUS, MAIL_TO_STAR)
		VALUES 
			(#{mailNo}, #{mailTo}, 'TO', 'INBOX', 'N', 'N')
	</insert>
	
	<insert id="sendMailCc" useGeneratedKeys="true" keyProperty="mailToNo" parameterType="Map">
		INSERT INTO MAIL_TO_T
			(MAIL_NO, MAIL_TO, MAIL_TO_ROLE, MAIL_TO_CATEGORY, MAIL_TO_STATUS, MAIL_TO_STAR)
		VALUES 
			(#{mailNo}, #{mailTo}, 'CC', 'INBOX', 'N', 'N')
	</insert>
	
	<insert id="sendMailBcc" useGeneratedKeys="true" keyProperty="mailToNo" parameterType="Map">
		INSERT INTO MAIL_TO_T
			(MAIL_NO, MAIL_TO, MAIL_TO_ROLE, MAIL_TO_CATEGORY, MAIL_TO_STATUS, MAIL_TO_STAR)
		VALUES 
			(#{mailNo}, #{mailTo}, 'BCC', 'INBOX', 'N', 'N')
	</insert>

	<insert id="addAttach" useGeneratedKeys="true" keyProperty="mailFileNo" parameterType="Map">
		INSERT INTO MAIL_FILE_T
			(MAIL_NO, MAIL_FILE_PATH, MAIL_FILE_ORIGIN_NAME, MAIL_FILE_SYSTEM_NAME)
		VALUES
			(#{mailNo}, #{mailFilePath}, #{mailFileOriginName}, #{mailFileSystemName})
	</insert>

</mapper>